 >> Let's discuss now the deployment models for the EC530 Cloud Computing. The deployment models, as we said, can be some sort of a hybrid private, public, or anything else [NOISE] What is really a public? A public is a Cloud infrastructure used by many other entities other than your company and can't be hosted on off-premise like for example, this is AWS or Google Cloud or Microsoft Azure. But the same time you can have your own private internal Cloud, your own deployment, your own API something that you do not expose the outside network on-premises internally. When we talk about a hybrid Cloud, this is effectively some combination between public and private because you may want to have some functions in a public environment and some functions which are very critical for your operation, a private environment. We gave the example in the past about Department of Defense and probably countries computing the resources from a public Cloud vendor and AWS does provide specific Federal Cloud data centers. But the same time some of the data you have, you want to keep them in your private Cloud, in your private infrastructure. So when we think about Cloud computing and the natural evolution of the web, we start from compute and storage. I want to have these machines to do this workload and I want to store this data and then we'll move to the platform as a service, for example, now I don't want to just store the data, but I want to store them in a structured way. Therefore now, I have databases or I need some extra security infrastructure so therefore, I need to have some roles and accessibility to specific resources. This is again is a platform as a service. Then we move towards the applications and especially mobile is important, like Android and iPhone applications that you develop and these interact with a Cloud web ecosystem. If actually we were in that website which is just a merely UI, and these you hit a web service and other web service search with whatever you want to see. An example of that is Netflix. You have this website where you go, you log in, and then you see all the movies, and while all of this happens in the background, there are thousands of microservices running on the Cloud that will give you the recommendation, would run big data analytics for you, would do live and offline machine learning and artificial intelligence staff and so forth. This goes back to the discussion we had about software service being applications on-demand, platform as a service, being developer platform for creating applications, storage and compute capabilities offered as a service. This is the infrastructure as a service. Now, there are four deployment models. The first is the enterprise to Cloud, where you have the public cloud. As we say, you have an enterprise in a public Cloud, you have your internet that interacts between these two and the data that the users can access these resources. Then this is the private Cloud where effectively you don't have any public component, but rather everything is inside your enterprise. Whether this is in my own datacenter or I'm forcing up a private Cloud in my own datacenter. Instead of going through the internet to get access to these resources, now you can access these resources by using the Intranet, which is effectively the local network. Then you have community cloud, where you have some variation of everything. Where you have many people accessing some public resources in a public cloud environment. Then there are some other sources accessed, either public or private. There's also an enterprise component to that, and the reason we call it a community is because you have intranet and you have internet as well. So you have a VPN. You have a VPN endpoint where you can securely have an isolated network compared to the Internet and access those resources. Then now you have hybrid models. What do you have a variation between public and private, and enterprise and local networks and so forth. So this more complicated setting and requires a lot of thinking to do that and open APIs. Because really, how do you deploy application oblivious of the underlying infrastructure? Now, the beauty about that is that most recently they have been orchestration systems like Kubernetes is one of them, that allows you to really deploy across multiple Cloud deployment models. You can redeploy on-premise or Cloud and hi-tech infrastructure to the overlaying obligations. Many enterprises want to move that especially security enterprises where they still want to keep some security infrastructure, but still use the public infrastructure. So we see a lot of movement from public Cloud or private enterprises total with a hybrid model, so we'll see how that evolves as well. The rationale, if you have to be the rationale, when do I choose between public and when do I choose between private club? The first is the security and privacy of business data is a big concept. You cant say that I'm going to upload my data to some sort of a public defender and don't expect my data to be replicated across multiple regions. Therefore, potentially going to Panama or to some other, either Bermuda islands, where the legal framework over there is totally different and therefore you don't know how the data will be used. The other big problem is if I really use the public Cloud, I may be vendor locked in. If I start converging towards specific APIs provided by these cloud vendor and I have to do that, if I want to use value-added services, I may have the problem that cannot really change the Cloud environment. Vessel is required for your time performance and reliability are important. For example, in a private Cloud, you can just control the resources and therefore you can say," You know something, I'm going to spend more money in more network bandwidth to accommodate that." But when you have to open with a Cloud vendor, then the cloud vendor has to do that in the background and have an SLA, service level agreement with you about it. Cost savings of the shared module achieved because of the multiple projects involving semantic technology the company actively developing. Again, if you move towards a more like a ladder model, a certain model, which is the public Cloud, you can really have cost savings from really deploying your own infrastructure. Now you can really share resources and do allocation accordingly. So you don't really need to use resources when you use a public Cloud. Cloud computing for enterprise. What should enterprise think about Cloud computing? Revise cost model to utility-based computing. You have to move out of the mindset that I have my own systems and I ran them now towards a more, I use CPU per hour, I use gigabyte per day and this is now my cost model. Your Chief Financial Officer, has to really now create new ways to capture cost. You also have to think about included hidden costs for management and training. Now if you want to migrate, you need really to train your employees and these employees have to adjust to the new setting. Different cloud images for different applications you have devalue them. You have to do performance testing for actual testing and figure out if everything is working the way you want. You have to prototype and learn because learning curve is important in the Cloud, it's not the same as running your own datacenter. You have to link it to current strategic plans of, let's say, sensory detection of disaster recovery. If you already have a disaster recovery scenario in the background, then you have to accommodate that for the Cloud resources as well. Again, private-public hybrid services, infrastructure, platform and software. Now you have the users that interact with these services and videos can be edited from metrics to browsers, to laptops, to IoT or data, for example, you collect from sensors. They will go to the Cloud be stored over there and analyzed and so forth. Now if you stood about this SaaS Maturity Model, initially was level one is AdWord customer, one instance per customer. That was initially the case where initially you were a tenant and you were asking for a resource. You had a one web service that is one instance, effectively talking to you. As we move towards a more configurable environment, now we know what we're going to provide on per customer. Then we will talk about a multi-tenant efficient system where now, for example, a tenant can access a web service which can be in a single instance. Now the more complicated is now you have a load balancer, that balance between multiple instances and then its tenants can be in any instance. So if you think about that, now you can start thinking about how you can sell resources behind load balances, and load balance is just a service. It's a DOM service effectively that just forwards traffic to the least loaded instance. This is how we have moved towards using our own systems, our own computer, towards using a pre-made system, towards all of us actually one computer towards using in the background, some load balancer to access those resources. Software as a service is a model of software deployment. When an application is hosted as a service provides customers across the internet. SaaS alleviates the burden of struggle of maintenance and support because now you don't really need to update it every time that version of the system, you don't really need to update the software itself, but rather the Cloud vendor updates the software for you. The terms we're using is platform as a service and infrastructure as a service, which is if actually underneath the software as a service.