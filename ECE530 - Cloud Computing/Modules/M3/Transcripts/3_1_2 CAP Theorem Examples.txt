 >> So let's go and see now some examples in terms of the CAP theorem. So assume that you have a bookstore, that you shop around the corner. For example, suppose you run an online bookstore and you proudly display how many of each book you have in your inventory. Every time someone is in the process of buying a book, you lock part of the database until they finish so that all of the visitors around the world will see an accurate inventory numbers. That works well if you run the shop around the corner. But now let's assume that you have Amazon.com. [NOISE] Amazon might instead use some cached data because they have so many customers, and therefore they have to serve so many requests. Users would not see the inventory count at this second, but what it was say an hour ago when the last snapshot was taken. Also, Amazon might violate the "I" in the ACID, we just learned before, by tolerating a small probability that simultaneous transactions could interfere with each other. For example, two customers might both believe that they just purchased the last copy of a certain book. The company might risk having to apologize to one of them when they check out from their shopping cart, but that's fine. [NOISE] But that's actually much better than slowing down the website and irritating myriad of other customers. So what I mean by that is when you design systems, you may have systems, that can be okay in some cases the way you design them, and it can't be satisfactory even if you like some of these properties. So Vogels, again a famous CTO at Amazon.com. He was involved in building the new shopping cart service back like 15 years ago. The old one used strong consistency for replicated data, but the new and is built based on a Distributed Hash Table called Chord. It has weak consistency with eventual convergence. So this weakens guarantees, but the system is not delayed anymore, so you can get performance. You may get after the checkout that, "Hey, we cannot serve you this load." But still, you can push some of these problems after the customers in some cases, so you don't have to over design your system. So in this case, speed matters more than correctness because the user can himself fix the problem or get a notification at a later point in time. [NOISE]