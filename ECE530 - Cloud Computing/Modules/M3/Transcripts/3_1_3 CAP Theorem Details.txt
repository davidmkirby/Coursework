 >> So let us go a little more detail about the CAP theorem. So informally, let's discuss about eventual consistency. Eventual consistent informally guarantees that, if no new updates are made to a given data item, eventually all access to that item will return the last updated value. So we call it BASE (Basically Available, Soft state, Eventual consistent) semantics. We will see as we move forward how important it is to use eventual consistency. The core problem is, when can we safely sweep consistency under the rug? For example, if we weaken a property in a safety-critical system context [NOISE] , something bad can happen. But Amazon and eBay do well with weak guarantees between many applications just didn't need strong guarantees to start with. We discussed earlier as well, if you remember that there are some applications like banks that require strong consistency. But there are applications like the Amazon socket guard which can survive with weak or weaker consistency. So by embracing their weaker nature to reduce synchronization and so better response behavior. But what happens when a wave of high assurance application starts to transition to Cloud-based models where effectively eventual consistency is the case? So availability. For a distributed system to be continuously available, every request received by a non-failing node must result in a response. We discussed in the beginning about the CAP theorem. So any algorithm used by the service must eventually terminate. Therefore, it puts bounds on how long a service, an algorithm can run. But it puts no bounds on how long the algorithm may run before terminating, it therefore allows unbounded computations. In the case of partition tolerance, the network will be allowed to lose arbitrary many messages send from one node to another. That was the definition we gave earlier. But when a network is partitioned, all messages sent from nodes in one component of the partition to nodes in another can be lost. So the requirements is atomicity and availability. The atomicity requirement implies that every response will be atomic, even though arbitrary messages sent as part of the algorithm might not be delivered. The availability requirement implies that every node receiving a request from a client must respond, even though arbitrary messages that are sent may be lost. So the idea of partition tolerance, as I said at the beginning, is where, for example, you have three replicas of the same data and maybe one or even two replicas are partitioned from the other two because let's say the network is down between that or those nodes. But as we said before, partition-tolerance says that if the system can operate as if it was operating, if all nodes were available, then the system is called partition tolerant. So similarly expected to be highly available. So some of the services that we see the website is that we expect for them to be highly available. That means that even if for arbitrary termination of a virtual machine on the Cloud or arbitrary issue with a specific system, every request should generate a response. When a service goes down, it may well create significant real-world problems. The classic example of this is the legal difficulties should the E-Trade web site go down. Now the important thing here you have to abide is that we design system to be highly available so they can be up. But in some cases, if we say, hey, we don't care about availability, we care about consistency and partition tolerance, there might be legal implications to that. For example, if you cannot trade your stocks on a high day or on a low day, then you may have legal implications. So that's why when you design a system, you have to understand what really the customer use cases. However, when we design for example a shopping cart, we don't care about the consistency because we can push back some of the errors to the customers. So fault tolerance. When some nodes crash or some communication link fail, it is important that the service still perform as expected. One desirable fault tolerance property is the ability to survive a network partitioned into multiple components and we discussed it earlier what does network partition means.