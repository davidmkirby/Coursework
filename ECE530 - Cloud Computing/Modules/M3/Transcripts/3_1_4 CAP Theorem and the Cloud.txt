 >> So let us discuss now the most exciting finding, how does the CAP theorem correlate with Cloud computing? Is really CAP theorem valid in the Cloud? So the fact is data center networks don't normally experience network partitions, but when you think traffic between data centers, you may have what we call wide area link fails. Most services are designed to update in a single place and mirror read-only data across others. So the CAP scenario used in the proof can't arise. But the problem with this is when you design systems or when you have, I'm going to do updates in a single place and then I'm going to just replicate the data to some read-only partitions. The problem when you do that is, overall, the single place, a single machine, a single instance, and that cannot scale properly on the Cloud. So Brewer's argument about not waiting for a slow service to respond does make sense. It argues for using any single replica you can find, but this preclude that replica being consistent. So let's see some properties. Consistency; updates in an agreed order. We said that, durability; once accepted, it won't be forgotten. Real-time responsiveness, replies with bounded delay. Security; only permits authorized access by authenticate parties. Privacy; we won't disclose any personal data of the Cloud. Fault-tolerance; failures can't prevent the system from providing desires services. Coordination; actions won't interfere with one-another. [NOISE] So let's discuss about why did really others have develop, for example, Dynamo? Dynamo was developed with eventual consistency in mind because the strict consistency about writing a single note will not work properly in this case. So what we see more and more in the Cloud is that relational systems where you can effectively write data to update in a single note cannot scale properly after specific sites. So as we see the Cloud that we want to horizontally scale, the ability to have multiple access and be available and partition-tolerant becomes more and more important. Policy have been built with some of the properties they have. For example, Memcached does not provide special guarantees. Memcached is just a casid layer. So as long as you're able to access the service which is highly available, that's all you care about. Google GFS is file is current if locking is used. So it is a transactional system because it's a file system. BigTable is shared key-value store with many consistency properties and you can change that. Dynamo is the result technology for Amazon shopping cart and uses eventual consistency. Databases, you have different types of databases. Snapshot isolation with log-based mirroring. This is a fancy form of ACID guarantees. Map reduce; they use a functional computing model within which offers very strong guarantees. A Zookeeper is an interesting technology where effectively, it's not really a data system, but it's a system where you can have locks, you can use it as a coordination system. PNUTS is a Yahoo! database system. So it's data spectrum of consistency options. Great systems, great [inaudible] I don't think it's really used right now a lot. Chubby, similar to Zookeeper, is a logic service. It has very strong guarantees. So let's see if we get the conclusion. What thing to notes about the services. Most of the cost 10-100 millions to create. It's very expensive. Huge investment required to build strongly, consistent, and scalable high-performance solutions. Oracle; if you think about the ones that are actually right now are the most users in the Oracle data systems, it would require billions and billions of investment for many years to get it properly. CAP theorem is not about telling Oracle how to build a database system. CAP is according to you, that strong properties can easily lead to slower services. So if you use Oracle, you may get strong properties, but effectively, at some point, your master node or the one that gets all the updates will slow down. But thinking in terms of weak properties, it's often a successful strategy that gets a good solution and requires less effort. So that's the important thing. You can create the best system ever that has actual properties. But of the Cloud, I'm not sure this is what you need. It's probably the web services. This is not what you really need. At scale, at small scale, you can do whatever you like.