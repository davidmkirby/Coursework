 >> So let us discuss the service level agreements. Service level agreements is something that we generally use in a lot of services on the cloud. I'm going to try to explain them a little more in detail in this subsection, with a hope that these parentheses from the Dynamo protocol will get us understanding about some of the techniques have been built within Dynamo to make sure that we satisfy some of these service level agreements. Service level agreement is a document where the cloud SLA is effectively a document. It's an agreement between a cloud service provider and a customer that ensures a minimum level of service is maintained. That means that if a service is being offered, you want some guarantees that the service will be offered based on how it is described. In order to do that the company and the customer signs a service level agreement. It guarantees the levels of reliability, availability, and responsiveness to systems and applications, while also specifying who will govern when there is a service interruption. this is more like a protocol, a service goes down, what happens? This needs to be described within the same set of agreement. Like the costumer will observe it, it will not find the cloud provider and the cargo will actually act on that. So why do we need an SLA? A cloud infrastructure can span geographies, networks, and systems that are both physical and virtual. While the exact metrics of a cloud SLA can vary by service provider, the areas covered are uniform, for example, a volume and quality of work, including precision and accuracy, speed, responsiveness, and efficiency. So what this means, it means that at a high level, the SLAs are fairly similar across the board. There will be exceptions always. For example, how long will the system be down? So if the SLA says 99.9 percent of the time the system is up, that's an SLA, that this provider provided. The document aims to establish a mutual understanding of the services, prioritized areas, responsibilities, guarantees, and warranties provided by service provider, and warranties is very important here. Because if the provider does not meet the SLA, then there has to be some impact. So how does the provider captures those SLAs? It has metrics, and responsibilities among the parties involved in cloud configurations are very clearly outlined, such as the specific amount of response time for reporting or addressing the system failures. There are many metrics you can do that, and there is a mean time to failure, and that's one metric, there is the how long the system will be down, and so forth. If the provider now violates, there are financial penalties the providers must pay for failing to live up to the guaranteed terms are also included. For example, how much you're going to pay back if the service is down? These penalties are often in the form of credits for service time. Now, think about it. Nowadays, there are companies which has multi-billion and hundred of billion valuation like Netflix, that is based, the control play is based on AWS. So if AWS goes down, that's a significant business impact to Netflix, which means that somehow it has to guarantee that AWS will actually provide the proper SLAs so that it can run the business, and this works for every customer. So SLAs are very widely used even across web services, even those that don't use cloud, like Facebook has it's own private data service. Sub-services must meet very strict SLAs, an example would be 300 millisecond response time for 99.9 percent of the requests at peak load of 500 requests per seconds. So effectively what this is, is you have to satisfy an SLA at a specific percentile, and this is what we discussed through the example. An average case SLA are not good enough, and the reason they are not good enough is because you may have spikes, like a spike of let's say, one or two requests that are causing substantial business issue. Because now the costumers are cannot access the service. So if you have let say one out of the 100 requests that are failing, the sign-ups, when somebody needs to sign up on a service, that means you are losing 10 percent of your customers. At the same time, it's not that you have SLAs for the whole thing, you have SLAs for each of the substances, and then sometimes I don't think a single service can actually make request to 150 services, which is a lot. So if each of them is failing one percent of the time, now, the probability that you work the whole service eventually is very high. So application can deliver its functionality in a bounded time. Every dependence in the platform needs to deliver it's functionality with even tighter bounds. We discussed that about the critical path, this is now how the latency within the critical path is important, becomes like a part of a contract. Design considerations. So when we design a system like Dynamo, we have effectively to sacrifice strong consistency for availability. Other [inaudible] SLAs will be hampered. Conflict resolution can be execute, or the read instead of the write, for example, every write goes there. What I mean by that? I mean that if the write goes in, then that means the surface is up, that means that you can actually satisfy the SLA. But if you design your system through like a relational system, the problem then becomes that some of the writes may fail. Other figures of Dynamo includes incremental scalability, where you can add notes based on demand, and this is important for these SLAs as well. Because if the demand increases, we need to be able to increase your ability to serve the increased requests. It provides principles like symmetry, you can allocate requests across all different replicas, decentralization, and heterogeneity.