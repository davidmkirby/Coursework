 >> [NOISE] The first steps we learned about the non-relational and relational model. Today, in this module, we're going to go a little deeper into the relational model. When we went back and discuss the CAP theorem a few sections, we discussed that SQL databases emphasize in the ACID, that is in the atomicity, consistency, isolation, and durability. You know what a slow SQL systems focuses on the BASE, basically available, soft-state, and eventual consistency. These are both based on the Brewer's CAP theorem, which is visualized, as you can see on the right side, a common definition of CAP, as we said this in the face of network partitions, you can't always have perfect consistency and availability. You need to effectively choose two out of the three. As you can see this example, like systems like Mic SQL, SQL Server, MariaDB, which are relational systems, are focusing on consistency and availability and consistency, where systems like Cassandra, Riak, CouchD, they focus on AP. They are not like relational systems. When you see consistency, you can think about some form of a relational system. These are associated familiar database like Oracle, Microsoft, SQL Server, Postgres. They made up of tables containing typed columns, schemas at raw data. Used when relationships between tables are necessary and complex. For example, an order contains a reference to a product and a customer. What happens is that you have these multiple tables and you tried to define connections between the tables that store the data. The customer contains a reference to an address table and a payment source. Database system itself enforces data integrity, for example, you can't delete a customer when an order refers to it. That means that you have some transactional semantics that happened in the background. Relational storage systems have historically been the bottleneck of large systems because as you try to horizontally scale, you can horizontally scale that no one handles the transactions. You need to scale up from a single node, often a large fast one, but have one more trouble scaling out because of need for consistencies which means that, you can effectively have more and more [inaudible] ACID. That also, you have to keep in mind that the more [inaudible] the more data you store in this master node, the lower your availability if this node goes down because I have a substantial amount of data going down before you are able to reelect and you master to huddle your rights. Having said that, most legacy data is this type of storage, so you won't lose them at any time soon. Relational storage are not gradual way. They serve a substantial business reason and they will continue doing that. Let's see here an example where you have a car, you have the CarKey, the MakeKey, the ModelKey and then you have the color, the Make table and the Make. You have these four tables. As you can see now, you can establish relationships between the color of the car and the car itself or the make model or the make, right? Therefore, if we look at the query, say, you'll find me all the cars produced in 2003 with color red and tire and make Nissan. In a relational database, a table is an organized set of data elements. That is the values. Using a model of vertical columns, which are identified by their name, and horizontal rows, the cell being the unit where a row and a column intersects. As you can see here, you say the the student, John Smith, with an ID 84. Now, the ID says they do a tennis and they have paid $36, they do swimming, and they have paid $17. Now, you can establish the relationships between the systems. An SQL Joins clause combines records from two or more tables in a database. It creates a set that can be saved as a table or used as it is it, all right? A JOIN is a means for combining fields from two tables by using values common to each other. In this case, for example, we have recipes, which is the table. We have the ID which is an integer, the name which is a character for 100 bytes. Then we have category ID, which effectively points to the category table, which also has a character 255, then another key that effectively points to this table. You can see now you have multiple tables that are appointed from the same entry, which is the recipes.