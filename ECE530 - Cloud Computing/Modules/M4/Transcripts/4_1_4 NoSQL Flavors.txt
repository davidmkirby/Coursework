 >> We briefly discussed about the NoSQL databases. Now, let's go into little detail about what are the flavors of NoSQL databases that exist. As we said, the NoSQL is a database that provides a mechanism for storage and retrieval of data. That is modeled in means other than tabular relations used in relational databases. The effective flavors you can see is like a key-value store, document, and graph, an in-memory data store, even a search. There is difference of these flavors. Let's go into key-value stores and some examples of them is like Redis, Azure Table Storage, Amazon DB, [inaudible] Riak are some of the examples. Stores data in buckets as key and a value pair. Each key must be unique and values don't have a type, they can contain any value at all. You can think about it as a hash table or a distributed hash table. This is the most common format. The ability of that is it provides very fast write operations. As long as you know the key, you could actually look at the data. You can actually write the data replace the data very fast rates if you select based on the key. For those who don't know actually time complexity, this can be like an O1 for a symbol, a key. But it can be very complicated when you try to search across the values because it needs to do a scan across different keys. It works great when you have a flat data model and schemas you can't model with RDBMS. It is considered some dictionary collections, hash table collections, and INI files, have a similar format with Key-Value Stores. A column store is like Cassandra, HBase, Hadoop, or even Bigtable. Data is stored as columns. Columns consist of a key-value pair and often a timestamp. Columns are grouped into rows or column families. Columns are grouped generally in tables. But there are no joins that are permitted. You still have some format [inaudible] tabular format, but then you still have it in a key-value system. It doesn't have a strict schema. For example, as you can see here below, you can have these ID and then you have a user ID. But in this ID you're going to have an in-reply in a different ID. No strict schema, its blazing fast processing abilities, it benefits seen through decentralization and scalability, and it doesn't allow joins between tables as in a relational system. The third one is the graph, like Neo4j and JanusGraph. Think of mathematics as edges and vertices, for example. The question here is; how did you really depict all that within a NoSQL system? It is composed of nodes and relationships on edges, both can have key-value collections and label tags can be added as well. It is ideal for where the data you have is defined by a relationship like for example, friend tracking on Facebook or movie database, or searching for things like friend of a friend of a friend who's not friends with me, or people who worked on a movie with me who haven't worked with my friend, or finding the shortest path between me and this person. Fundamentally speaking, with a graph database, it's a kind of work rate where the level of testing is very deep. But it can also be a double-edged sword because it can be really slow. The final flavor and I would say the most popular is the document one. Information is stored as documents like a [inaudible] , like a JavaScript Object Notation, JSON, or by Binary forms of JSON, or even XML. Documents are still collections of key-value pairs. But documents are collected in collections. The values can be like a Boolean or Integer or even different types of some documents or arrays, so you can detect them and even have different levels of testing. It's really fast of writing, it's flexible indexing for fast value searching, it provides for horizontal scaling, schema-free, schema-less. It is great as an object store as well.