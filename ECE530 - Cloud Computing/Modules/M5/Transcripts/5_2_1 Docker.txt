 >> So let us go now and see about Docker. Docker is an open-source project that automates the deployment of applications inside software containers, by providing an additional layer of abstraction and automation of operating system-level virtualization of Linux. In the previous slides, we discussed about how the industries in the 1960s, they used to ship goods and how in the introduction of containers we made advantage of packaging the goods in a container that [inaudible] [NOISE]. In a similar idea we now have different app applications that are packets within a container. Now they can seep in different types of cloud or on-premise hardware deployments. We also discussed about virtual machines versus containers. So let's see, in virtual machine, you have physical hardware, hypervisor, guest operating system, files system, application. Within a Docker, within that container, you have physical hardware, host, Docker engine, union file system, and then different types applications. So what this means is, Docker effectively it's a wrap and around containers. Docker makes it easy to build, modify, publish, search and run containers. So it's more like a container balance with ecosystem. With Docker, a container comprises of both an application and all of its deployments. That means you have the container plus the way you can deploy it. Containers can either be created manually, or if source code containers a Dockerfile, automatically. So dockerfile is more like instructions of how do you create a container and how do you package the software within a container. Subsequent modifications to a baseline Docker images can be committed to a new container using Docker commit function, and then pushed to a central registry. So it's more how do you commit the code upstream to a GitHub repository. You can also commit those Docker commit functions up to specific Docker registry [NOISE]. Containers can be built in a Docker Registry using Docker search. Containers can be pulled from the Docker Registry using Docker pull and can be run, started, stopped. So in this case, we have the Dockerfile and then you have the host operating system, and then we effectively say, "Oh, these are the instructions of how you are going to built that Docker container." So that you build a container. Once you have a container, you can push the container to a registry. So that another user can actually pull the container and drag it, or they can pull a drag multiple different types of containers. Let's see the Docker use cases. Docker provides isolation, portability, and provisioning. So effectively with Docker, you can have all of them together. So you can have the container, you can use different types of scripts like chef, puppet, ansible. These are frameworks for automation of scripts that can build a container. Then you can effectively add in your Docker container details of your applications and libraries together [NOISE]. In a simple where we go to the CLI or Linux, we can just do sudo docker run ubuntu. What we'll do is added bin/echo "Hello World", and what it'll do, it will speed up an Ubuntu container, effectively echo or the command line, "Hello World". That's it. You can also do more things. You can say, I want to run a container with a specific variation of Ubuntu, and then just give the sudo access to the bin/bash. So what happen is, once you run this command, effectively, it speeds up a container and now you're ready to work within the container. So you can do the pwd to see the rest of the folders. You can do ls to see the list of the files and so forth. So effectively here, this is a simple as that. This is the host operating system, you say a lot of container with "Hello World", another container to give you access to that. Once you get access, you can do similar commands as you do it in any Linux operating system. [NOISE]