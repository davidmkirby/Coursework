 >> Let us discuss another container management system called Mesos. Apache Mesos is an open-source cluster manager. It is designed to scale to very large clusters involving hundreds of thousands of hosts. Mesos supports diverse workloads from multiple tenants; one user's Docker containers may be running next to other user's Hadoop task. So bottom line, this is basic infeasible with any other container map-making system like Kubernetes and so on and so forth. Apache Mesos was started as a project from University of Berkeley before becoming the underlying infrastructure used to power Twitter and an important tool at many major companies such as eBay and Airbnb. So this is another good example of how like an academic project will become a major industry effect in terms of how we deploy containers. With Mesos, we can run many frameworks simultaneously. Marathon and Chronos are the most well known. I highly suggest you Google those Marathon and Chronos, and read more about those as they correlate to Mesos itself. Let's see now the Mesos architecture. The Mesos architecture is comprised of the Mesos agent nodes, Mesos master, and zookeeper. Mesos agent nodes are responsible for actually running the tasks. All agents submit a list of their available resources to the master. There would be typically 10-100,000 of agent nodes. The Mesos master, the master is responsible for sending tasks to the agents. Maintains a list of available resources and makes "offers" of them to the frameworks. Decides how many resources to offer based on an allocation strategy. There will be typically be two or four stand-by masters ready to take over in case of a failure. So this is for high availability. You can see we have multiple replicas of a master. One probably is in active and the rest are in passive mode. Zookeeper is used to elections and for looking up address of current master. Typically, there are 3-5 Zookeeper instances will be running to ensure availability and handle failures. Bear in mind that in a ZooKeeper, as a centralized configuration management system, I would say as electron system is used by many systems including Mesos. So ZooKeeper is not very much specialized Mesos, but these are widely used database. Frameworks. Frameworks coordinate with the master to schedule tasks onto agent nodes. Frameworks are composed of; executor, scheduler. So executor process which runs on the agents and takes care of running the tasks. Scheduler which registers with the master and selects which resources to use based on offers from the master. There may be multiple frameworks running on Mesos cluster for different kinds of tasks. Users wishing to submit jobs interact with frameworks rather than directly with Mesos. Marathon is designed to start, monitor, and scale long-running applications. Marathon is designed to be flexible about the applications it launches. It can even be used to start other complementary frameworks such as Chronos. Chronos comes from the name "cron", which is used famously as a job executed within Linux. It makes a good choice of framework for running Docker containers, which are directly supported in Marathon. Marathon supports various affinity and constraint rules. That is like different constraints, you can set constraints on CPU, network or memory, or disk drive. Clients interact with Marathon through a REST API. Of course, this is common with many services on the Cloud. Other features include support for health checks and event stream that can be used integrated with load- balancers or for analyzing metrics. Again, we need to support health checks because we need to find out whether the service is up and running, or there is a bug in the system. An event streams means that you can pull information out of Marathon so that you can analyze those metrics.