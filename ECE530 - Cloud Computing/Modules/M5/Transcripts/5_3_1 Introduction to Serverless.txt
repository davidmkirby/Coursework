 >> So we have discussed about containers, we have discussed about virtual machines, now we're going to the next topic which is serverless. You can effectively run application without even running a single server, this is the most high-end and the most latest topic in terms of Cloud computing that you can probably find around. What is serverless? Serverless architectures refer to applications that significantly depend on third-party services, like Backend as a Service or custom code that runs in ephemeral containers like Function as a Service. So most probably, we'll focus on the second aspect on the Function as a Service, which is how you can run effectively, instead of spinning up a container to run application, you spin up a function that runs in a container So Mobile Backend as a Service, it's serverless, was first used to describe applications that significantly or fully depend on third-party application services in the Cloud to manage server-side logic and state. This is typically rich client applications like single page web apps or mobile apps that use the vast ecosystem of Cloud accessible services, so this could be like Firebase, Parse, authentication like Auth0, or AWS Cognito and so forth. Again, we're not going to focus so much on that, but think about all these elements that tend to run when you run a Mobile as a Service ecosystem. So Functions as a Service applications where some amount of server-side logic is still written by the application developer, but unlike traditional architectures is run in stateless compute containers that are event-triggered and ephemeral and fully managed by a third-party, which means now you don't manage the third-party containers, the containers are ephemeral, and they are triggered by events. So if something happens to the ecosystem, there is an event that gets triggered, spins up a compute container, runs the process and then returns back the outcome, and you don't manage any of the containers, so that's what severless is about. So building and supporting a severless application is not looking after the hardware or the process. Effectively, all of that is outsourced to a vendor, so effectively we're going from Software as a Service, a little higher than Software as a Service I would say, where you don't run anything other than the service itself or the application as a function. Where can you find severless? There are many ways, AWS Lambda is run code without thinking about servers. Pay for only the compute time you consume, which means that you start a function, you deploy it on Amazon, it runs, you get paid, let's say for two, three minutes, five minutes, that this function runs and then it goes down. Google offers a similar [inaudible] , which is Google Cloud Functions. It's a lightweight, event-based, asynchronous compute solution that allows you to create small, single-purpose functions that respond to Cloud events without the need to manage a server or a runtime environment. This of course holds for Google, for Amazon as well, and for Azure Functions and IBM OpenWhisk so that effectively different offerings between Cloud providers are through containers. A good list can be found in this GitHub link, I highly advise you to take a look about that and there you can see effectively all the list of serverless frameworks. The phrase serverless doesn't mean servers are no longer involved, it simply means that the developers no longer have to think that much about them. Computing resources get used as services without having to manage around physical capabilities or limits. Like this, you don't need any more to think about how much memory I'm going to allocate, how much hard drive I'm going to allocate, this is taken care by a third-party provider. Serverless allows you to not think about servers, which means you no longer have to deal with over/under capacity, deployment scripts, Dockerfiles, scaling, fault tolerance, operating system, or language updates, metrics, and logging. All this will be taken care by the Cloud provider, you just write a function.