 >> Serverless containers is deploying functions containers about deploying isolated resources within a machine. Let's now go deeper a little about an example of how serverless, what is serverless? How does serverless work? So let's think about a UI driven application, which is the Classic Design. You have what we call the traditional 3-tier client oriented system with server-side logic. A good example is a typical e-commerce application, for example, implemented in Java on the server side. So the server is actually running some sort of a Tomcat server with an HTML JavaScript component as the client. So effectively, the client asks for the Pet store, I want to buy this food for my dog. The Pet store itself acts as the database, and the database says yes, I have this food, here it is, or get I'm going to run into my car I'm going to buy them. With this architecture, the client can be relatively unintelligent. All right? With much of the logic within the system, like authentication, page navigation, searching, transactions implemented by the server logic. Serverless decide for the Pet store. Now what you need is deleted the application logic, replaced it with a third party service, all right? So in this case we have [NOISE] the client, called access service that says, I want to authenticate a faction speeds up that says, I've got to authenticate that person, then, you check the database, the client itself is the third one, and then you do the search, you type what you did, and then you finally do a purchase function. So for every function that you do within the website as a customer, that speeds a function for the serverless component. So client can have direct access to a subset of our database, for example, just a product listings, which itself is a fully third party hosted. For example, could be like, hey, I'm Amazon AWS DynamoDB has all my data, follow the data, follow the product listings and nobody else can access or other functions. Likely to have a different security profile for the client acts in the database this way from any server instances at the access to the database. So now you're actually isolating the Purchase Database, that Product Database and only specific costumers can have access based on specific privileges that the authentication service has provide. So these previous two points imply a very important that some logic that was at the Pet store server, is now within the client. For example, keeping track of a user's session at the starting at the UX structure of the application like page integration. Reading from a database of translating that into some usable form. The client is in fact well on its way to becoming what we call a single-page application, Server UX related functionality, can be get in the server. For example, if it's computed testable request access to significant amounts of data. An example would be assets. That means that, the reason we do that is because especially with mobile phones, you tend to focus much of the energy conservation, which means that if somebody is computed density has to be pushed the server. For the search feature, instead of having an always running server, we can implement functions as a service function that responds to HTP request via an API Gateway, all right? Which we'll describe later. [inaudible] We have both the client and the set of function read from the same database for product data. Since the original First server was implemented in Java and AWS Lambda, our Faas vendor of choice in this case, supports functions implementing Java, we can port the search code from the Pet store server to the Pet store search function without re-writing anything. Finally, we can replace our purchase function, all right? With another Faas service, to keep it on the server side for security issues rather than implementing the client. It's too fronted by the API Gateway. So what we saw here, is we saw that we can now replace all of these modeling of the web server with much smaller search functions that can run for a finite amount of time. That settle the purpose of that function, like the purchase factor, the search function, and that's bottom line of the idea of serverless