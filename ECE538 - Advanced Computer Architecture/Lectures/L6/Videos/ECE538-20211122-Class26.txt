 So I can record the class for them. Okay. I'm sharing in the recording. Okay. So we can start seeing the waiting to join. So good afternoon, everyone. Thank you so much. 14, Big Bang. And this is the class of course ECE538: Advanced Computer Architecture at the University of New Mexico. So, yeah, last class we'll finish on that lecture fly here in in-progress classes, especially for the main part of several classes. Before we have learned the basic features of the computer architecture, the heirarchy up the memory to architecture, and also the instruction set architecture, right? And after that, when nerd, Let's pipe any fusion and the per penny execution. Yeah, Amman, There's some techniques that approach it's Lux operon out and planning. Yeah, introduced to improve the system performance, right? So yeah, this is the main bar we need to introduce or discussed in computer architecture design. Yeah, about the legs, that instruction level parallelism we end up happening in the computer Oxfordshire. So after God would know the, some limitations here about the instruction level parent item, right? This will have some effect on the performance improvement brought by the instruction level parallelism. For example, you know the hazard right there or structure or has that data, has that and control has that in then. Yeah. It turned to the legs from topics of the ILO. You're increasing the ability of the XL compilers and the processor, yeah, in order to further exploit the parallelism, all of the operations, Right? So after that, yeah, after we introduce instruction level parallelism actually had another fundamental problems that wasted the approaches or techniques introduced or put the data on level paradigm shift, as well as the task level paradigms of traditional approach is for the parallel operations in the computing system. So we just finish about talking about these three types of the paradigm. Them that IOP be up to a level that TLB here. Some of this approach use all the techniques design improve the performance of the computer architecture. However, that doing the operational ADA from operations computing system, actually there are some unexpected event. This event, well sometimes disturb or disrupt the normal flow of the execution of the instructions. And this is currently executing by the processor. Write this normal flow updates fusion. So they will into brought to the operations legs exceptions and also caught them into rots. Today we will go to that part, you know about the exceptions and also the inter rots during the operations in the computing system. So for the additional information you can refer to the appendix of this food. I wrote him back. How does him? And yet you can find more details here. So now we are starting to a nerd and describe the exception in into rot. Yet with more details here. So yeah, actually, you can know Holly interrupt and exception. Yeah. They exit. The system. Actually had to supply to the month both sides with security size about the computer architecture. So about the exceptional and an interrupt, it came to our mind first or you can nerve from the names you hear that at your exception. Yeah. Days. Basically AT that. Except it expected a but yeah, Actually a frog the operations, how the processor and the interrupt is also expected event from the outside of the processor, right? Thought this expected operations on that a. But here, as you might know, whenever an exception or an interrupt occurs, actually, the hardware will start executing the code that performs an action in response to the exception. So this actually invoke like to kill a process. I'll put an error message if there is one, except. So sometimes zeta will communicate with the external implies. Or higher would occur. How computer system by like to buy initially. Like you are familiar with the blue screen of death or your computer device, right? It also means of SIP URI. That is not good and that's bad effects during the operation. So the instructions yeah, responsible for this action? Yeah, for the exception. Right? And reciting the operating system, the kernel, and also duct code that can perform this action as actual will call the interrupt handler code. All right, so now we can think of data handed a quote, that operating system. Yeah, the variety. So after dad yet you say after the handler code is executed in this situation, Yeah. And it may be possible to continue da, da, da da, da da, da. Normal exclusions after the instruction. Yeah, actually, the execution of the interrupt occurred during that exclusion. So after that, it is possible to continue the execution after all this handling about that exceptional or the interrupt. So formally, we can define the exceptions and also divide that into rots in the computing are the operating systems. So first off or yeah, ethnicity here we need to know what is the trap in the computing systems were comparable with that. Another two types out on a expanded operations into Iraq and also the exception. So the child what is trap here? Yeah, As you might know, a trap is also known as exception or we know as fault. Though it is typical type of thing Mars into Raj. And they say is caused by an exceptional condition. For example, that breakpoint, all awesome times dividing, buys their role or the a value to a memory access. So they did well cause the legs up for other exception, we caught the track. So that trauma is where the you know, the stuff that we're instruction that closes the execution of the exception handlers and interrupt service routines. So you let a trap. Yeah, and we'll raise DOD in switch to a Kano model during the operation. Yeah, in that model, the operating system can perform some actions before returning to control to the original proposal. So let a traveling the chronic process that is more serious, that are traveling user process, right. And a storm systems, it is a fatal. So ie some usages the term yes. It refers to especially to interrupt intended to initiate, lack of context, switch to a monitor program or a debugger. So yeah, deriving from the original your day job that actually trump is sometimes it is used afford the Mackenzie all like the intercepting or normal control flow in some domains. So that is the trap, so will only continue to nurse exceptions and interrupts. So we need to know what is the difference between the tabs at the exceptions here. So actually traps initial action. The terms are, you know, by the programmer, they are using the instruction in legs X86. So S1 and this instruction is encountered to the, the program counter, gets transferred to the special handler routine. So we'll never abnormal condition occurs. Actually. There will be exceptions here. So for the exceptions in that into rot, yeah, as we said, they are the expected, it burns down, made these, this, you disrupt the normal flow of the instruction execution, right? So exception is that. Unexpected event from wasting the processor legs to know that undefined opcode. The overflow or other, the other kin about the inter brought that into rather is also expected. Unexpected event from outside the processor for a says for and you know, the next operations like the external IO controller, that left leg operations. So you'll implement the x-direction and also the interrupt handler in grammatical security side. Yeah, so what exception or interrupt occurs during the operation. And you have the hardware will pick gain executing the code. This code, it can perform an action in the, Yeah, they're okay response to the exception. So this action may involve lead to carrying the process smoother are outputting that error message. Or even it can communicate with the external device. Or they can heavyweight crashing the Intel computer system. Like to initiate other, as we said, that, that, that, that blows degree of that this is showing your screen right? C-instructions responsible for this action recite the operating system kernel. And also this call can perform this action that is called the interrupt handler code as we stand. So after the handler code is executed, and it may be possible to continue that normal execution, as with that, after the instruction, where the exclusion of the interaction occurred during your operation here. So this are the exception and interrupts in how they are. They my occurring dusty stone or during the operation. And a weird they will occur in how there will be deal ways during the operation. So yeah, put that into rods. They actually had the signals will be sent to the CPO by the external devices, are nominated based devices might be the IO devices. So they will tell the CPU to dump its current activities. And 10 is the appeal to execute the appropriate part of the upgrading system. So for the anchor rods, basically, there are three types of the East into rots here. The first awhile, maybe the hardware into rot. So the highway into a rock, you know, the generated by the generator, by the hardware devices to seeing mode that they need attention from the operating system. So they may have just a risk. There is some data, for example, data from the keystrokes on buckyball, odd data on the oscillate a car. The others like they they have just a cockpit hospital which the operating system Craig, we're requesting, such as transferring data between the hard drive in a memory, cell phone-based can off data, all of the information about the previous request to operations. Nice inflammation, we'll call that a hardware interrupt. Yeah, That's how the signals to show they need some attention from the operating system to deal waste. And so, and that's our time off into rots, the stuff that we're into rods. So compare with data about the hardware interrupts, it actually does stuff there were interrupts. They are caused by any internal system of the computer system. And suddenly we're into rods are generated by the program. Yeah. One day one to request a system core that to be performed that by the operating system too. So this piano being derived from the front that a software, a generator by the programs for the attention from the operating system to deal with. So another type, or the third type out the interrupt, see the wall, we caught the traps. So try to add generated by the CPU itself. Yeah. These tabs generated to indicate that there are some errors or there are some conditions occur for this. And they will have they will need assistance from the operating system yeah, to the airways. So this third type of the tracks, I can read it by CPU itself, not from da, da, da, external hardware interrupt or the software interrupts. So enter God's action. They are important because, you know, they give the user better control over the computer itself. So I feel. That without that into rots, your actual user may have to wait for a given application to have a higher priority, actual over the secure to be right, Right. So this, this tides of the interrupts actually can ensure that the CPU will deal with the process immediately, if necessary. Either for the hallway, I request all from the software or the CPU itself. So a male, it is important for the user to have better control over the computer itself. Find that into rots. So basically about that main program can run continuously and the program can be compared to the needs of any IoT device, right? So the data transfer between the CPU and up period of rows is initiated by the CPU itself, right? So, but sometimes the tibial can now start the transfer unless your peripheral as ready to communicate with the CPU. So in this case, the device is ready to communicate with the CPU and will generate an interrupt signal in a number of input and output devices. They are attached to the computer and each device up then it's able to generate an interrupt request if necessary during the operation. So as shown in this figure here, you're doing the operations in the main loop here. Actually an interrupt service routine. Yeah, we'll call it i is, are here. Yeah, it is called an interrupt occurs. Or for example, there is an IO device that is ready. So after the completion of the interrupt, and it will return to the main lobe as you flow. So besides, for the communication between the CPU and IO devices, actually the operations will be conducted following the sticks dabs demonstrated in the right flow here. This is the workflow of the six dabs, yeah, for the operations. So what device deliver in each IO operation, it will trigger the IO that the tiger, the IO operations by the IO controller. And then as long as the input is ready, the output will be yellow. Completed, all there will be other wise error will be generated in interrupts, a signal here. So after then the CPU Paris HIPAA, or you know, the inherent and also the CPU can transfer the control to the interrupt handler. Yeah, accurate. And this time the interrupt occurs. So this will handle the data processing what that one does if you test for the control to the interrupt handler. So finally, the process will return from interrupt, etc. That the CPU can resumes. Actually had the CBO can resume. But normal processing of the interrupt that task, uh, from that point, that means it will come back from the data into rot again. So this is the general idea of the interrupter and also thought that the workflow of that operation. So January or not though I years of the system interrupt can be initiated as following. The system into robbed at the nation and daddy, the hardware device, the operating system when this event occur. So the operating system params, adding running process to handle it. You've been occur by switching the context away of broad bell count in a running process. So this, this domain to route to a nose for a more responsive. Yet the system then that will be available when the technical pooling about the exclusion. So since you know it it can give the response as long as that into Iraq to requests a jury the operation. However, note that the hardware support is required for the system into rots it. One there are the hardware interrupt her, right? So that maze, more complex implementations IU but I needed it. System interrupt. A cheeto DO is this. Expected it but the main job of the interoffice see, so actually it is to identify the source of the interrupt. So there is also possibility die on those several devices that will request a simultaneously for the secure communication, right? So in this case, the interoperate system has to decide which device among this Debra up advices is to be service. So surveys first, that means the CPU will decide the dot. Order or the sequence to deal with this multiple. Inter rods are similar. Time is a request for the operating system. Right? So yeah. Lead for a specific into Iraq year. You know, there are basically three steps during the action. Actually, how they can begin with by the CPU, right? So in the first Deb, yeah, on this nano of the programs are saved automatically on the on the stack where the program counter, that is a PCA you have amino is so, so the program can resume at the right place after dealing with interrupts, Right? So actually with the same information after the interrupt, then after that, the control will be transferred from the operation by the CPU. To us. The bezel addresses specific by the interrupt vector here. So this vector is doubled by that can give a dress off the interrupt service routine. That is the I is are we a car before? So this is a dress assigned to the interrupt or service, right? So the interrupt, your program will be processed according to the new address and new program content, right? So one of the interrupt service routine, after the eyes are here, the interrupt service routine actually goes through the workflow were introduced to before. Yeah, a special form of the rates instruction that is RTI will be used to restore those banners of the process. Save that before yeah, that easy before that into Ra to handle it here. So Enter, we'll resume the program again from the point where the interrupt occurred, right? So daddy's Das interrupt to well be the other ways by the system. So the following details about the process HOPWA, three steps off the system interrupt you here. In all the processor standards will be saved automatically. The program memory stack by the program counter. Yeah, actually when the interrupt occurs. So this is the detailed steps. All of them are designed for on the, how the interrupter can be other ways by this routine. So then the control will be transferred. A tuba. Yeah, actually in the sentence map, right? Specifically, the control will be transferred to a special address specified by a interrupt vector here. Yeah. They sent one to one correspondence shown in this table. So the interrupt vector as a double byte. Yeah, actually it will give the address to the interrupt service routine for the interrupts or operation or the interrupt an action. So the new address will be pointed at by the program counter and to change the execution order. Finally, the surface there and the unknown, the interrupt service routine. The eye is our right as the base form as we're motion of the return instruction. Rti. Yeah. Nmos to be used to restore the process of Snyder's, for instance, the MITS instruction architecture. The instruction that as we turn to form exception, now we've caught our fee so it will return the previous instruction, all the standards to about creating systemic. So the implementation of the interrupt vector him, yeah, actually that can be followed as the flow demonstrating or fewer into R2 vector table is a data structure that can associate needs of the interrupt handlers. These headers with a nice interactive request in the table of the interrupt vector as we're showing in the previous slides. So each entry of the interrupt vector table that we call it the interrupt vector here. So the interrupt vector is the should the address of an interrupt handler. So when note that concept, it's come across processor architectures. Yeah, they may be implemented into architecture specific fashion is due to their specific operations here. So this depths are the three steps, how the interrupts can be dealt with in the system. Some day is one K pointed towards understanding how the operating system will work. To understand what the sich das boring I interrupt occurs during the normal operation. Hardware of the CPU does the exact same scene for each interrupt. So this is what allows the operating system to take control away from the currently running user process. So the switching of the running processes to execute a code from the operating system kernel that is called a context switch. Yeah, maybe if amino way, so NIMH, the context switch. So that's videos. You're going to rely on that data containing a pebble registers to actuate you're currently at hand, those are into rots. So there is one resistor which can hold a pointer to the process control block of the currently running process. And also this gesture is that h tan or processes noted into the memory. And the there will be Othar read yester, the USDA to hold a pointer to a table containing the pointer to the instruction in the upgrade kernel for the interrupt handlers and also for the system course. So the manual in this gesture and the contents of the cable us that when the operating system is initialized and the boot camp. So that's it for the interrupts, the CPU can perform the following actions in response to an interrupt again. So I was the best and they will use a pointer to the parent process control block. And thus bed and all register venues for the process will be staying for use when this processor is layer restarted after the interrupt and then also the CAPM mode bit. It's waste to the supervisory mode. And then they will use appointed to the interrupt handler table. And that the interrupt vector, as we showed before, and the location of the kernel code as to execute that is determined during this period. And so the interrupt vector is the as actually for the hardware interrupt. And let the red fine to rob the controller Rochester. And also this, you'll be, and they could be, I don't want to interrupt assembly. So this language instruction for the software interrupts. I think also it can, you know, that processing could be switched to the product, a portion of the kernel. When the CPU of bits per farm is performing. Kids who responds to that interaction occurred. Then? Yeah, As a software interrupt is shown here. The city or actually we'll use a table, net attractable industrial era. And the also the inter rather vector to find the operating system and data code to execute. Execute that the response in response to the system interrupts. So as the computer runs that processing switches between the user process and treat the operating system as a hardware software, interrupts are received at the same time so that the response to the anchor rocks. Also the timing on NGOs such as describe the, you know, the exceptionalist emotions. Well, you know that nano exclusion order of the instruction is tagged the barriers among the machines, right? So the other turning to wrap that the for all even the exception I used. So we use the term a section to cover all this mechanism, including the following like so operations then you know that as new data here, including the IO device request invoking an operating system. So base from a user program that we caught the system for. And also Tracy instruction execution breaking point. Now we also called the programmer request or into rot, and also lacked the integer arithmetic overflow or underflow as well. That floating point arithmetic, a nominee. And other other situations like that page for the FDA. Eisenmann as required, or the memory protection violation. Or if you Osama as using an undefined instruction during evaporation or otherwise lacks the hardware malfunction and the power foreigner during the operation. So these are the types of the exception sprain my mate, during our oil operation or da, da, da, da, normal execution in the computing system. So for the exceptions, there are some requirements on the exceptions that can be. Characterised by five types basically. So the first is about the synchronous versus asynchronous. So if the event occurs and the same place, every time the program is executed with the same data or the same memory allocation. So basi bunt is sink nurse. So always the exception of the hardware malfunctions, the synchronous event k, they are caused by dumb luck that you've, why is this external to the poor Center in memory? So this events you when it can be handled after the completion of the, uh, you know, the Cabernet instruction. Actually, they will makes them easier to hanger, right? Another type is about user request or versus the core read. Though, if they use our task therapy Oscar for it, it is the user request eat. But so in some sense, you use exceptions are not really code as the exceptions since you will know they are predictable, right? So they asked on tons of all UV and a tweed as the exceptions. Of course, those thin mechanism data will be used to save and restore the day that I used for this user requests to eight. But we know the only function of an instruction that tigers the exception is to cause the exception and the user requested exception. They can't always be handled after the instruction has completed. So the cost exception, another type, of course that by the sum hotter even that is not under the control of the user program. And they are harder to implement because they are non-predictable compared with the user requesting extensions. So the CRM alone, maybe the user Moscow Goldberg, versus the use a non scribble. Go. If an event can be masked or disabled by a user task. Actually it is user Moscow bowl. So this mosque seen yet and is this a can simply control whether the hardware response or to the exception or not. So we're using the, sometimes the exceptions are wasting the instruction or they are between the structures. So this classification depends on whether this e but prevents the instruction computation by occuring in the mail. Now means a wheezing that exclusion. Or whether it is the Maoist between some instructions, exceptions that occur waving the instructions are always think runners. So since the instruction Tyler's, there are exceptions, right? So any harder to implement exceptions that occur, whizzing the instructions, then that between the instructions, since you know that instruction might be stalled and done restart. So the, the last one, maybe some of the exceptions can be resumed or there will be terminated, right? Though, if the programs exception, the actual, the program's execution, always stop after interrupt. He's the termini IV. But if the program's execution continues after the interrupt, it is the chord as the resume in front here so that it's a compare with the resume and the terminate interruption here. So after the requirements on the exception of all the Pyrex, her rise to type out that 80 Rob to hear a JD is easier to implement the a and the exceptions that terminate the exclusion right? Sees Oh, no, no mercy need not to be able to restore the execution of the same program after handling all this is exceptions. So yeah, as we mentioned before, the instructions are the operations like the branches and the like the jobs. They can provide the ways to change their control flow in the program, right? Some exceptions a year. They can also change the control flow in the program. So as the MIP is convention, they call it that exception weren't on Baghdad changing the control flow? Yeah, regardless of the source. For instance. It'll be without distinguishing between the ways he's a processor sores or external source. The exception actually it is, is that you'll be synchronous if it occurs and the same place every time. Yeah, a program, if it's curated with the thin data or executed with a thin memory allocation. So that's the arithmetic overflow, undefined instruction page fault. They are some examples of the synchronous exceptions here. So awesome. Exceptions on the other hand, they might happen, whereas no temporal relation to the program be executed before. So Langsam, operations about the IO request, the memory errors, power supply sooner. Yeah, these are the examples of the US in verse 8. But so basically there are three types of events that will trigger an exception. So definitely they are the arithmetic overflow on define a instruction and the server about the system. So it's the best anyway. Well, the first one, if the exception as in a and it's induced by, by the arithmetic overflow. Yeah, occurred during the execution of instructions. Next, add the a or the legs as instructions. If the result of the computation as too large or too small to hold in the result register. And these cases, the overflow output of the ALU will become high gear with the execution state. So that's the IV, but they cannot. Events will trigger an exception for the center one. The exception maybe tiger by the undefined instruction now occurs. One, yeah, I'll noise instruction is fetched Berlin the operation. So this exception, actually it is called the by the instruction in the IR DOD has an unknown and odd code, or they have an R type instruction and down have that unknown function call. So that is the wild type or the instruction we introduced to before about the R type. So the third law about the title, the exception, might be caused by the system call. The system call will occur when the processor execute the system call instruction. So system going instructions are used to implement the operating system services. That is the one panel function that request. So for the akinesia or the hair for fraud, the operating system. So nasa at the base of the types of exceptions in the MIP, computing our teacher. Then also MI is computing our teachers are, the exceptions, are managed by the system control, a co-processor that is called the CPU, SAP O'Hare. So exceptional habits down Control Enter, or we call it the control. Well, the affirmation will be transferred to a different program. The exception handler. Yeah. A reader except for the purpose of dealing with the exceptions, right? So the in-lab is architectures, actually a mind. His architecture, the exception program counter will call HE say here. Edit will be used to save the program counter by offending well into rotted instructions. So after this exception, no contour as returning to the program was executing one, the exception occurred. So that program continues as if nothing happened before. So exception appears as a procedure yeah, Actual with no parameters and no written bandwidth, right? It will take the as if a procedure has been inserted in the program as normal operations. So it will continue as if nothing happened before. So multiple executions might occur. Scenes motto, more instructions are executing. For instance, the instruction about an unknown word for love. Yet uno, followed by the instruction divide might cause a page fault, right? In the same cycle. So say so another code for the exception. For the exception handler, Edomite be executed at anytime during the operation. So there can be no parameters passed to it. You're passing the parameters or whether we crowd the prayer preparations, right? So for the same reason that there may not be any return values form an exception operation. So besides the exceptions can eat but occur. Yeah, all of that are, for example, a P4. Oh, the instruction memory can occur earlier about page 4 of the data memory caused by the preceding instruction aimed up. So my execution has to be handled in or out the execution of the instruction not according to the time they occur during the operation. Some other way introduce all of them bought, bought the Halting handle, the exception in MIPs, I shall we know that it is in your kitchen. Oh, man, that the exception handler must preserve the day of the program not to interrupt, such as the execution can continue at nato Taboola integral, quite resilient Fonda exception, right? So as with the procedure here, the exception handler yeah, Him Master, save any Regenstrief, AMA modified, and then restore them before returning control to the integral abroad program. So saving, gesturing the boundary causes the partner made a match is actually so that is addressing the memory will recur there we gesture or what the base register in which the aggressive fold. So that is why it is important to save every information before transferring the control to the exception contour. And that it is for the for the procedure to come back to the initial operation after the exception. So yet further MI, cuz exception, they will be handled by a peripheral device to our CPU code co-processor. Got the Crusades are actually contains a number of gestures. Gestures can be used to configure the exception Canada. And they can be used to report the standards of the parent exceptions. So there's some rude gestures. Co-processor register yeah, as the exception program counter in the during the oppression. So exceptional occurs in the MIT. She has architecture first read the 4s interest rate too. So rather than handler, then the recorded actions will be determined by folks than life the program started, it takes a cognitive action. Niantic used the exception program counter to return to the program. So that is to resume the executions in the user process after the exception. For example, the system core, it has been handled by the corner, right? So otherwise the program will be terminated. As we mentioned before, that one type of Dutch exceptional about the terminate, right? So meaning will era of the using of the demo be an arrow. The party of using the exception program counter now will be reported to the, to the user. So yeah. So we haven't learned the implementation and also the Audubon aged out the paper. Yeah, so these are the expected operations here. So we'll only consider the single exam flow and add in the five-stage faith-based or operations flexor execution, right? The instruction actually is to add to the exam, are sure to add the values in the 90 and 90 and store the result. You adopt a restaurant one. So in order to prevent value from the number one from being clobbered, actually a previous instruction should be completed. After that. The flashy and instruction at the substep 1 instructions can be upgraded. So Euler said the CTO of the exception and the exception program counter register value during this operation. Since there will be the exception. And also test for the controller to the Hendra lead one of the example here. Except that the tides of the exceptions. Sure. Anyway, the previous slides actually a long time, but what does the Bronner's yeah. Crazy exception they're occurring wheezing the instruction that can be resumed. And they add them most difficult to implement during the operation. So this difficult tasks to implement that into rots or kerning, raising the instruction, the instruction might be resumed. This horse it a request and neither program to obey in bot in order to stay in the stale after executing programs, in order to credit the exception. And also in order to restore this date of the program before the instruction that caused the exceptions. And also they will be responsible to start a program from the instruction that caused the exception. So if a pebble and provides the ability for the machine to handle the exceptions, to save this did return to the instruction and also restore without affecting the execution of the program. Actually, the path of the motion is that you restartable. Right here. There's our excepted expected operations. So actual almost all machines today. The restorable. Yeah. They can or they have the ability for the machine to handle the exceptions, to save the dancers, to return to the instructions and also tourists are the system was done affecting the exclusion of the program. The course, right? Actually, it is needed to implement the virtual memories to ask where measure before the horse, they will need to store this information before they fully transfer the control to the exceptions. So almost all machines today restorable based on this requirements. So here's a demo about the exceptions. In this example, the instruction add here that aid in blue color shows an exception here. So during this instruction, the handler will be used to adjust the program counter. Next, this now means that program come to your work showing point to another, a dress wisdom. Was that handler about the two pointed to the sphere to deal with exception. So yeah, I just threw that a falling further. Yeah, it is some operations journey this large components you can intuitively see the stage and also the operation of the, of the exception example on the add instruction in the previous example, it's showing there there are some situations where multiple exceptions instead of the single exception occur. Yeah, absolutely. There will be much more complex. Right? So we know that overlaps multiple instructions. Tommy's, it could have multiple exceptions and one Germans operations, right? So basically, each stage of the five-stage pipeline architecture, there might have been heights of the exception. For example, the memory for the instruction fetch stage and also Mary stage. So any upheld in the ID stage and also the arithmetic exception in the EX stage. There might be multiple exceptions during the operation. Does simple approach to deal where it's touching. Actually, that is to start firmed up Bernie's 2 adsorption and flash those sub-samples instruction then thus to guarantee the precise exceptions. So when you get to a node, bags into rafter or an exception that is called the precise. If the save the processor state. This state is corresponded with the sequential model of the program exclusion. Action is exclusion is where one instruction exclusion and before the next big gains. So that will be called as precise to store this information exactly according to the sequential model of these exceptions. Then the precise exception maize, not all instructions before the following instruction are committed and those A3 can be restarted it from scratch. So if a rough or first or instructions in program order before the interrupt signal, instruction, me, and or later instructions can be removed. So depending on the teacher and a tie bizarre exception occurred during approaching Agile, the sorting structure should be a commit or should they remove the result of any agnostic effect during the operation. So either carpets pipeline is actually a mandatory instructions can be issued a per cycle and then they can be compounded on-off or as we discussed before. So. Well, you know, even they can meet the outweighs. Actually, it is the most difficult to maintain the price as exceptions. A no complex model. Pep has large it is much more process or much more stairs to be SAW state. To deal with mineable exceptions, a concave mandible peptides. So there's one sigmoid somewhat you showed them multiple exceptions. A note 5-stage pedantic here. So suppose that the instruction, our brand new courses or paid-for during their age and stage and then ADD instruction will cause a page for during the I, F stage and arithmetic exception will occur during the execution stage. So the pitfall for the add instruction actually occurs to side clock cycles before the paid-for, for the more instruction, even though you know the add instruction is after though. Now that instruction in the instruction sequence, right? So in this case, yeah, Ed is the employment, you do the precise exception not on Daisy instructions. And add here. Yeah, before the 40 instruction. They are committed. And the instruction, I think it can be even started the farthest scratch. So these are the how or how difficult to deal with the multiple exceptions and the multiple instructions here. Yeah, try to make the point size to deal with multiple instructions. One. So specifically, I suppose that the Elena no instruction will cause a pitfall during the memory stage and the Add Course to pay for during instruction fetch stage and also the iris stage. So for the, for the add instruction actually occur two clock cycles before the dominant step. Says a structures exist permanently order rightly sooner. The exceptions are handled in order to have an earlier or later. So this solution will cause that inflammation are exceptions caused by instruction. We'll be saved and a pastor down through the pipeline registers until the end of the perfect. Now means the exception. Show Bulgaria with English sequence when they happen. So yeah, all we talked before about the exceptions, right? As we'll talk about that, there will be a way in order to do the precise exception. So Mazur or in the opposite, there will be the imprecise exceptions. So what that implies in precise exceptions actually didn't mean that synchronous exception that does not adhere to the precise exception. More of the lands in the cell broadband a new single precision floating point operations. They will generate the legs in precise exceptions. So one way fishing, when we are facing waste in precise exceptions, we need to justice dogs a pecan, and to save the stairs of the program, including your exception courses, nasa hammer and workout. Which instruction? Next? Alm you or the ad. The handler will work harder. Which instruction had the exception and a width of that instruction should be compared and flushed so that in precise exceptions, PennSim pay simplified the header worthy site in y is more complex for the software handler 2. So actually, the course, it is not feasible for the complex model Asia on-off, on-off order peptides as shown before. So that difference between the precise exception, the precise exceptions, but also their solution. So finally, we need to know what to do. One exception or interrupt occurs. So yeah, As we know the reasons or the operations about the exceptional and the interrupt. Yeah, Liang exception, boring towards occurs. Your processor may perform the following actions. Absolutely. Yeah, my mission before, yeah, it is to move the current program counter into another gesture. Yeah, we'll record the EPC. All record the reason for the exception in the course we gesture. And I was like, Oh man, I'm going to disable the further into rots or the further infections from occurring. So actually by naphtha shifting the status register and then it'll change the counter. Yeah, this this operation is also called JMP. So nasa will change the contour to the heart of wild eight steps. You have an address. Then after that section or the interrupt, it is to return phone, the hand or your processional may perform the following actions to return that and etc. In order to perform the eights are rods. So A1 will move the contents of the HEC. That is the one you move to another we JSR, right? So this inflammation, all of this content will be moved from the region structure, the program counter gain, and it will enable the introverts are the exceptions by redshift the head of the standards we gesture. So these are the operations to start the pepper and that saved us there. And then after comment of IT operations either were written back to the normal operation by changing the program counter and also the content here. Follow to deal with the multiple types of exceptions and also the, the, the interrupt here. Yeah, a situation than, you know, some situations where multiple types of the the exception and I'll sort that into rods will occur there. In those situations, there must be a myokines and yet a place where different header or quotes can be executed or four different types of IV fluids or right. So in general, there are two masters for Hannah mean there's Palmer. Yet the one to four instructions, a interrupts. And neither is to vector a to vector that interrupts. So the processor can branch to a certain address that the things are sequence of the instruction and to check the course of the exception. And also you can branch the handler code for the type of the exception that encounter. So this is called the to pull the exception handling. And also the processor can branch to a different address for each type of these exceptions. So each inspection or dress is secreted by only one word and a jump instruction will be placed. And each of this or dresses that will force the process to jump to the handler access to the handler code for each title of this exception. So this method is called the vector exception handling. So this sounds are two halves of the masters to your handle to handle the exception problem. So for the MI, yes, our teachers, it will use the first a matter that is a poor instructions. So we will implement the exception that way. So in our case here, some cases, the exceptions where cause the processor to jump to a high wild instruction or dress, right? And our segments are saying instruction, actually starting and desert. We'll check the course of H ofs that exceptions and do the actions accordingly. So we ask them there. So just to next handler do as we showed before. Also, we will need to use the clause to a JSR to record the course. I'll update detection or that interrupt that before jumping to the handler code. And I think that as the basic dealing with the tides of the exception into that actual, according to their reasons. They have separate Are they have just take the mass or 20? Handling this problem, is there to put the interrupts or two vectored interrupt. So there are different ways and we'll have the different operations and then return back to the normal operation them. So these are the contents of this lecture to show. Yeah, actually has you simply show, I'll have a brief introduction about the expected operations during the execution computing system. So we have now inhaling too wrapped and inception in the system to support the money cycle secure design, right? So that's the end of the entourage and also the infrared or actions. They are introduced as well. You know, the, how does the pupil responds to the interrupts? After that? There are tides out the exceptions. Yeah, we have introduced how do you handle the exceptions? In my case, our feature that happening operations where there's multiple exceptions. Also. These faster, right? So way, yeah, we'll also know what do you do when an exception or interrupt that occurs in how to deal with EquatIO that multiple parts of the exceptions and that means we're brought into how we can deal with them. So, yeah, So far we have now several aspects in the design of the computer acts, which are already including the instructor or the introduction of the performance power allergy constraints in the computer architecture design the design, the design as well, the optimization of their memory hierarchy, including the cash techniques for them right across there. Instruction level parallelism been honorable per reminds them as well as content in this class about the exception and interrupts in the system. So they said, I'm normal design optimization, or it's tuition or da, da, da, da, my occur in the design and optimization of the computer, our cultures. So we're already know some of the most important basic concepts of the advanced a complete picture and also their accommodation parties here. So and pass in the following classes. I will. Yeah. And bone to worse term. Yeah. Sure. Your CRM, state of the art design approaches and also the optimization techniques for the customized and also emerging computer architectures. Together with yeah, especially for the state of the art design approach is next the hardware and software co-design for the emerging computer Africa. And moving applications to share more about the teens are designed for hardware, software recoded that are related to the yeah, the textbook already mature are false. So these are dummy content today. And if you have any questions, you can stay and ask me. Well, not fearful. Thank you so much for this class. Thank you.